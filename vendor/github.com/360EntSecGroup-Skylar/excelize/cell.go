// Copyright 2016 - 2019 The excelize Authors. All rights reserved. Use of
// this source code is governed by a BSD-style license that can be found in
// the LICENSE file.
//
// Package excelize providing a set of functions that allow you to write to
// and read from XLSX files. Support reads and writes XLSX file generated by
// Microsoft Excelâ„¢ 2007 and later. Support save file without losing original
// charts of XLSX. This library needs Go version 1.8 or later.

package excelize

import (
	"encoding/xml"
	"errors"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"time"
)

const (
	// STCellFormulaTypeArray defined the formula is an array formula.
	STCellFormulaTypeArray = "array"
	// STCellFormulaTypeDataTable defined the formula is a data table formula.
	STCellFormulaTypeDataTable = "dataTable"
	// STCellFormulaTypeNormal defined the formula is a regular cell formula.
	STCellFormulaTypeNormal = "normal"
	// STCellFormulaTypeShared defined the formula is part of a shared formula.
	STCellFormulaTypeShared = "shared"
)

// GetCellValue provides a function to get formatted value from cell by given
// worksheet name and axis in XLSX file. If it is possible to apply a format
// to the cell value, it will do so, if not then an error will be returned,
// along with the raw value of the cell.
func (f *File) GetCellValue(sheet, axis string) string {
	return f.getCellStringFunc(sheet, axis, func(x *xlsxWorksheet, c *xlsxC) (string, bool) {
		val, err := c.getValueFrom(f, f.sharedStringsReader())
		if err != nil {
			panic(err) // Fail fast to avoid future side effects!
		}
		return val, true
	})
}

// SetCellValue provides a function to set value of a cell. The following
// shows the supported data types:
//
//    int
//    int8
//    int16
//    int32
//    int64
//    uint
//    uint8
//    uint16
//    uint32
//    uint64
//    float32
//    float64
//    string
//    []byte
//    time.Duration
//    time.Time
//    bool
//    nil
//
// Note that default date format is m/d/yy h:mm of time.Time type value. You can
// set numbers format by SetCellStyle() method.
func (f *File) SetCellValue(sheet, axis string, value interface{}) {
	switch v := value.(type) {
	case int:
		f.SetCellInt(sheet, axis, v)
	case int8:
		f.SetCellInt(sheet, axis, int(v))
	case int16:
		f.SetCellInt(sheet, axis, int(v))
	case int32:
		f.SetCellInt(sheet, axis, int(v))
	case int64:
		f.SetCellInt(sheet, axis, int(v))
	case uint:
		f.SetCellInt(sheet, axis, int(v))
	case uint8:
		f.SetCellInt(sheet, axis, int(v))
	case uint16:
		f.SetCellInt(sheet, axis, int(v))
	case uint32:
		f.SetCellInt(sheet, axis, int(v))
	case uint64:
		f.SetCellInt(sheet, axis, int(v))
	case float32:
		f.SetCellFloat(sheet, axis, float64(v), -1, 32)
	case float64:
		f.SetCellFloat(sheet, axis, v, -1, 64)
	case string:
		f.SetCellStr(sheet, axis, v)
	case []byte:
		f.SetCellStr(sheet, axis, string(v))
	case time.Duration:
		f.SetCellDefault(sheet, axis, strconv.FormatFloat(v.Seconds()/86400.0, 'f', -1, 32))
		f.setDefaultTimeStyle(sheet, axis, 21)
	case time.Time:
		vv := timeToExcelTime(v)
		if vv > 0 {
			f.SetCellDefault(sheet, axis, strconv.FormatFloat(timeToExcelTime(v), 'f', -1, 64))
			f.setDefaultTimeStyle(sheet, axis, 22)
		} else {
			f.SetCellStr(sheet, axis, v.Format(time.RFC3339Nano))
		}
	case bool:
		f.SetCellBool(sheet, axis, v)
	case nil:
		f.SetCellStr(sheet, axis, "")
	default:
		f.SetCellStr(sheet, axis, fmt.Sprintf("%v", value))
	}
}

// SetCellInt provides a function to set int type value of a cell by given
// worksheet name, cell coordinates and cell value.
func (f *File) SetCellInt(sheet, axis string, value int) {
	xlsx := f.workSheetReader(sheet)
	cellData, col, _ := f.prepareCell(xlsx, sheet, axis)
	cellData.S = f.prepareCellStyle(xlsx, col, cellData.S)
	cellData.T = ""
	cellData.V = strconv.Itoa(value)
}

// SetCellBool provides a function to set bool type value of a cell by given
// worksheet name, cell name and cell value.
func (f *File) SetCellBool(sheet, axis string, value bool) {
	xlsx := f.workSheetReader(sheet)
	cellData, col, _ := f.prepareCell(xlsx, sheet, axis)
	cellData.S = f.prepareCellStyle(xlsx, col, cellData.S)
	cellData.T = "b"
	if value {
		cellData.V = "1"
	} else {
		cellData.V = "0"
	}
}

// SetCellFloat sets a floating point value into a cell. The prec parameter
// specifies how many places after the decimal will be shown while -1 is a
// special value that will use as many decimal places as necessary to
// represent the number. bitSize is 32 or 64 depending on if a float32 or
// float64 was originally used for the value. For Example:
//
//    var x float32 = 1.325
//    f.SetCellFloat("Sheet1", "A1", float64(x), 2, 32)
//
func (f *File) SetCellFloat(sheet, axis string, value float64, prec, bitSize int) {
	xlsx := f.workSheetReader(sheet)
	cellData, col, _ := f.prepareCell(xlsx, sheet, axis)
	cellData.S = f.prepareCellStyle(xlsx, col, cellData.S)
	cellData.T = ""
	cellData.V = strconv.FormatFloat(value, 'f', prec, bitSize)
}

// SetCellStr provides a function to set string type value of a cell. Total
// number of characters that a cell can contain 32767 characters.
func (f *File) SetCellStr(sheet, axis, value string) {
	xlsx := f.workSheetReader(sheet)
	cellData, col, _ := f.prepareCell(xlsx, sheet, axis)

	// Leading space(s) character detection.
	if len(value) > 0 && value[0] == 32 {
		cellData.XMLSpace = xml.Attr{
			Name:  xml.Name{Space: NameSpaceXML, Local: "space"},
			Value: "preserve",
		}
	}

	cellData.S = f.prepareCellStyle(xlsx, col, cellData.S)
	cellData.T = "str"
	cellData.V = value
}

// SetCellDefault provides a function to set string type value of a cell as
// default format without escaping the cell.
func (f *File) SetCellDefault(sheet, axis, value string) {
	xlsx := f.workSheetReader(sheet)
	cellData, col, _ := f.prepareCell(xlsx, sheet, axis)
	cellData.S = f.prepareCellStyle(xlsx, col, cellData.S)
	cellData.T = ""
	cellData.V = value
}

// GetCellFormula provides a function to get formula from cell by given
// worksheet name and axis in XLSX file.
func (f *File) GetCellFormula(sheet, axis string) string {
	return f.getCellStringFunc(sheet, axis, func(x *xlsxWorksheet, c *xlsxC) (string, bool) {
		if c.F == nil {
			return "", false
		}
		if c.F.T == STCellFormulaTypeShared {
			return getSharedForumula(x, c.F.Si), true
		}
		return c.F.Content, true
	})
}

// SetCellFormula provides a function to set cell formula by given string and
// worksheet name.
func (f *File) SetCellFormula(sheet, axis, formula string) {
	xlsx := f.workSheetReader(sheet)
	cellData, _, _ := f.prepareCell(xlsx, sheet, axis)

	if formula == "" {
		cellData.F = nil
		f.deleteCalcChain(axis)
		return
	}

	if cellData.F != nil {
		cellData.F.Content = formula
	} else {
		cellData.F = &xlsxF{Content: formula}
	}
}

// GetCellHyperLink provides a function to get cell hyperlink by given
// worksheet name and axis. Boolean type value link will be ture if the cell
// has a hyperlink and the target is the address of the hyperlink. Otherwise,
// the value of link will be false and the value of the target will be a blank
// string. For example get hyperlink of Sheet1!H6:
//
//    link, target := xlsx.GetCellHyperLink("Sheet1", "H6")
//
func (f *File) GetCellHyperLink(sheet, axis string) (bool, string) {
	// Check for correct cell name
	if _, _, err := SplitCellName(axis); err != nil {
		panic(err) // Fail fast to avoid possible future side effects
	}

	xlsx := f.workSheetReader(sheet)
	axis = f.mergeCellsParser(xlsx, axis)

	if xlsx.Hyperlinks != nil {
		for _, link := range xlsx.Hyperlinks.Hyperlink {
			if link.Ref == axis {
				if link.RID != "" {
					return true, f.getSheetRelationshipsTargetByID(sheet, link.RID)
				}
				return true, link.Location
			}
		}
	}
	return false, ""
}

// SetCellHyperLink provides a function to set cell hyperlink by given
// worksheet name and link URL address. LinkType defines two types of
// hyperlink "External" for web site or "Location" for moving to one of cell
// in this workbook. The below is example for external link.
//
//    xlsx.SetCellHyperLink("Sheet1", "A3", "https://github.com/360EntSecGroup-Skylar/excelize", "External")
//    // Set underline and font color style for the cell.
//    style, _ := xlsx.NewStyle(`{"font":{"color":"#1265BE","underline":"single"}}`)
//    xlsx.SetCellStyle("Sheet1", "A3", "A3", style)
//
// A this is another example for "Location":
//
//    xlsx.SetCellHyperLink("Sheet1", "A3", "Sheet1!A40", "Location")
//
func (f *File) SetCellHyperLink(sheet, axis, link, linkType string) {
	// Check for correct cell name
	if _, _, err := SplitCellName(axis); err != nil {
		panic(err) // Fail fast to avoid possible future side effects
	}

	xlsx := f.workSheetReader(sheet)
	axis = f.mergeCellsParser(xlsx, axis)

	var linkData xlsxHyperlink

	switch linkType {
	case "External":
		linkData = xlsxHyperlink{
			Ref: axis,
		}
		rID := f.addSheetRelationships(sheet, SourceRelationshipHyperLink, link, linkType)
		linkData.RID = "rId" + strconv.Itoa(rID)
	case "Location":
		linkData = xlsxHyperlink{
			Ref:      axis,
			Location: link,
		}
	default:
		panic(fmt.Errorf("invalid link type %q", linkType))
	}

	if xlsx.Hyperlinks == nil {
		xlsx.Hyperlinks = new(xlsxHyperlinks)
	}
	xlsx.Hyperlinks.Hyperlink = append(xlsx.Hyperlinks.Hyperlink, linkData)
}

// MergeCell provides a function to merge cells by given coordinate area and
// sheet name. For example create a merged cell of D3:E9 on Sheet1:
//
//    xlsx.MergeCell("Sheet1", "D3", "E9")
//
// If you create a merged cell that overlaps with another existing merged cell,
// those merged cells that already exist will be removed.
func (f *File) MergeCell(sheet, hcell, vcell string) {
	hcol, hrow, err := CellNameToCoordinates(hcell)
	if err != nil {
		panic(err)
	}

	vcol, vrow, err := CellNameToCoordinates(vcell)
	if err != nil {
		panic(err)
	}

	if hcol == vcol && hrow == vrow {
		return
	}

	if vcol < hcol {
		hcol, vcol = vcol, hcol
	}

	if vrow < hrow {
		hrow, vrow = vrow, hrow
	}

	hcell, _ = CoordinatesToCellName(hcol, hrow)
	vcell, _ = CoordinatesToCellName(vcol, vrow)

	xlsx := f.workSheetReader(sheet)
	if xlsx.MergeCells != nil {
		ref := hcell + ":" + vcell
		cells := make([]*xlsxMergeCell, 0, len(xlsx.MergeCells.Cells))

		// Delete the merged cells of the overlapping area.
		for _, cellData := range xlsx.MergeCells.Cells {
			cc := strings.Split(cellData.Ref, ":")
			if len(cc) != 2 {
				panic(fmt.Errorf("invalid area %q", cellData.Ref))
			}

			if !checkCellInArea(hcell, cellData.Ref) && !checkCellInArea(vcell, cellData.Ref) &&
				!checkCellInArea(cc[0], ref) && !checkCellInArea(cc[1], ref) {
				cells = append(cells, cellData)
			}
		}
		cells = append(xlsx.MergeCells.Cells, &xlsxMergeCell{Ref: ref})
		xlsx.MergeCells.Cells = cells
	} else {
		xlsx.MergeCells = &xlsxMergeCells{Cells: []*xlsxMergeCell{{Ref: hcell + ":" + vcell}}}
	}
}

// SetSheetRow writes an array to row by given worksheet name, starting
// coordinate and a pointer to array type 'slice'. For example, writes an
// array to row 6 start with the cell B6 on Sheet1:
//
//     xlsx.SetSheetRow("Sheet1", "B6", &[]interface{}{"1", nil, 2})
//
func (f *File) SetSheetRow(sheet, axis string, slice interface{}) {
	col, row, err := CellNameToCoordinates(axis)
	if err != nil {
		panic(err) // Fail fast to avoid future side effects!
	}

	// Make sure 'slice' is a Ptr to Slice
	v := reflect.ValueOf(slice)
	if v.Kind() != reflect.Ptr || v.Elem().Kind() != reflect.Slice {
		panic(errors.New("pointer to slice expected")) // Fail fast to avoid future side effects!
	}
	v = v.Elem()

	for i := 0; i < v.Len(); i++ {
		cell, err := CoordinatesToCellName(col+i, row)
		// Error should never happens here. But keep ckecking to early detect regresions
		// if it will be introduced in furure
		if err != nil {
			panic(err) // Fail fast to avoid future side effects!
		}
		f.SetCellValue(sheet, cell, v.Index(i).Interface())
	}
}

// getCellInfo does common preparation for all SetCell* methods.
func (f *File) prepareCell(xlsx *xlsxWorksheet, sheet, cell string) (*xlsxC, int, int) {
	cell = f.mergeCellsParser(xlsx, cell)

	col, row, err := CellNameToCoordinates(cell)
	if err != nil {
		panic(err) // Fail fast and prevent future side effects
	}

	prepareSheetXML(xlsx, col, row)

	return &xlsx.SheetData.Row[row-1].C[col-1], col, row
}

// getCellStringFunc does common value extraction workflow for all GetCell* methods.
// Passed function implements specific part of required logic.
func (f *File) getCellStringFunc(sheet, axis string, fn func(x *xlsxWorksheet, c *xlsxC) (string, bool)) string {
	xlsx := f.workSheetReader(sheet)
	axis = f.mergeCellsParser(xlsx, axis)

	_, row, err := CellNameToCoordinates(axis)
	if err != nil {
		panic(err) // Fail fast to avoid future side effects!
	}

	lastRowNum := 0
	if l := len(xlsx.SheetData.Row); l > 0 {
		lastRowNum = xlsx.SheetData.Row[l-1].R
	}

	// keep in mind: row starts from 1
	if row > lastRowNum {
		return ""
	}

	for rowIdx := range xlsx.SheetData.Row {
		rowData := &xlsx.SheetData.Row[rowIdx]
		if rowData.R != row {
			continue
		}
		for colIdx := range rowData.C {
			colData := &rowData.C[colIdx]
			if axis != colData.R {
				continue
			}
			if val, ok := fn(xlsx, colData); ok {
				return val
			}
		}
	}
	return ""
}

// formattedValue provides a function to returns a value after formatted. If
// it is possible to apply a format to the cell value, it will do so, if not
// then an error will be returned, along with the raw value of the cell.
func (f *File) formattedValue(s int, v string) string {
	if s == 0 {
		return v
	}
	styleSheet := f.stylesReader()
	ok := builtInNumFmtFunc[styleSheet.CellXfs.Xf[s].NumFmtID]
	if ok != nil {
		return ok(styleSheet.CellXfs.Xf[s].NumFmtID, v)
	}
	return v
}

// prepareCellStyle provides a function to prepare style index of cell in
// worksheet by given column index and style index.
func (f *File) prepareCellStyle(xlsx *xlsxWorksheet, col, style int) int {
	if xlsx.Cols != nil && style == 0 {
		for _, c := range xlsx.Cols.Col {
			if c.Min <= col && col <= c.Max {
				style = c.Style
			}
		}
	}
	return style
}

// mergeCellsParser provides a function to check merged cells in worksheet by
// given axis.
func (f *File) mergeCellsParser(xlsx *xlsxWorksheet, axis string) string {
	axis = strings.ToUpper(axis)
	if xlsx.MergeCells != nil {
		for i := 0; i < len(xlsx.MergeCells.Cells); i++ {
			if checkCellInArea(axis, xlsx.MergeCells.Cells[i].Ref) {
				axis = strings.Split(xlsx.MergeCells.Cells[i].Ref, ":")[0]
			}
		}
	}
	return axis
}

// checkCellInArea provides a function to determine if a given coordinate is
// within an area.
func checkCellInArea(cell, area string) bool {
	col, row, err := CellNameToCoordinates(cell)
	if err != nil {
		panic(err)
	}

	rng := strings.Split(area, ":")
	if len(rng) != 2 {
		return false
	}

	firstCol, firtsRow, _ := CellNameToCoordinates(rng[0])
	lastCol, lastRow, _ := CellNameToCoordinates(rng[1])

	return col >= firstCol && col <= lastCol && row >= firtsRow && row <= lastRow
}

// getSharedForumula find a cell contains the same formula as another cell,
// the "shared" value can be used for the t attribute and the si attribute can
// be used to refer to the cell containing the formula. Two formulas are
// considered to be the same when their respective representations in
// R1C1-reference notation, are the same.
//
// Note that this function not validate ref tag to check the cell if or not in
// allow area, and always return origin shared formula.
func getSharedForumula(xlsx *xlsxWorksheet, si string) string {
	for _, r := range xlsx.SheetData.Row {
		for _, c := range r.C {
			if c.F != nil && c.F.Ref != "" && c.F.T == STCellFormulaTypeShared && c.F.Si == si {
				return c.F.Content
			}
		}
	}
	return ""
}
